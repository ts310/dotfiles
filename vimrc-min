" vim: nowrap fdm=marker

" Initial settings {{{1
" ---------------------------------------------------------
  set nocompatible
  set encoding=utf-8
  let mapleader = ","
" }}}

" Load plugins {{{1
" ---------------------------------------------------------
  filetype off                 
  runtime macros/matchit.vim
  runtime ftplugin/man.vim
  set rtp+=~/.vim/vundle.git/  
  call vundle#rc()             
  Bundle 'unite.vim'
  Bundle 'ref.vim'
  Bundle 'The-NERD-tree'
  Bundle 'The-NERD-Commenter'
  Bundle 'ctags.vim'
  Bundle 'ack.vim'
  Bundle 'neocomplcache'
  Bundle 'YankRing.vim'
  Bundle 'vim-diff'
  Bundle 'tpope/vim-surround'
  Bundle 'tpope/vim-repeat'
  Bundle 'tpope/vim-fugitive'
  Bundle 'tpope/vim-git'
  Bundle 'tpope/vim-rails'
  Bundle 'tpope/vim-unimpaired'
  Bundle 'tpope/vim-abolish'
  Bundle 'tpope/vim-commentary'
  Bundle 'SuperTab'
  Bundle 'vim-diff'
  Bundle 'Align'
  Bundle 'ZenCoding.vim'
  Bundle 'neocomplcache'
  Bundle 'php.vim'
  Bundle 'php-doc'
  Bundle 'cocoa.vim'
  Bundle 'Match-Bracket-for-Objective-C'
  Bundle 'snipmate-snippets'
  Bundle 'quickrun.vim'
  Bundle 'sql_iabbr-2'
  Bundle 'SQLUtilities'
  Bundle 'phpcomplete.vim'
  Bundle 'Command-T'
  Bundle 'Color-Sampler-Pack'
  Bundle 'taglist.vim'
  Bundle 'kogakure/vim-sparkup'
  Bundle 'svn-diff.vim'
  Bundle 'kmnk/vim-unite-svn'
  Bundle 'groenewege/vim-less'
  Bundle 'XML-Folding'
  Bundle 'intuited/vim-shell_complete'
  " Bundle 'vimshell-ssh'
  " Bundle 'Shougo/vimproc'
  " Bundle 'Shougo/vimshell'
  filetype plugin indent on
" }}}

" Behaviour {{{1
" ---------------------------------------------------------
  nnoremap ; :
  set backspace=indent,eol,start
  set history=50
  set incsearch
  set visualbell t_vb=
  set hidden
  set nojoinspaces
  set wildmode=longest,list
  set nrformats=

  if has('mouse')
    set mouse=a
    set guioptions+=a
    set ttymouse=xterm2
  endif

  " Natural behavior with wordwrap on
  nnoremap j gj
  nnoremap k gk

  set virtualedit+=block

  nmap <ESC><ESC> ;nohlsearch<CR><ESC>
  map <leader><space> :noh<CR>

  " insert mode
  imap  <C-e> <END>
  imap  <C-a> <HOME>

  " Enable vim navigation in insert mode
  imap <C-j> <Down>
  imap <C-k> <Up>
  imap <C-h> <Left>
  imap <C-l> <Right>

  " Automatically move to last cursor position
  if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
  endif
" }}}

" Appearance {{{1
" ---------------------------------------------------------
  " Useful status information at bottom of screen
  set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
  set ruler
  set showcmd
  set laststatus=2
  set listchars=tab:▸\ ,eol:¬
  set number
  set cursorline
  " When the terminal has colors, enable syntax+search highlighting
  if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
  endif
" }}}

" Indentation {{{1
" ---------------------------------------------------------
  set autoindent
  set paste
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
  set expandtab
" }}}

" Disable swapfile and backup {{{1
" ---------------------------------------------------------
  set nobackup
  set noswapfile
" }}}

" Buffers {{{1
" ---------------------------------------------------------
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
  nnoremap <C-tab> <C-w><C-w>
  nnoremap <leader>v :vsp<CR><C-w>l
  nnoremap <leader>h :split<CR><C-w>j
  map <D-A-right> :bn<CR>
  map <D-A-left> :bp<CR>
" }}}

" Folding {{{1
" ---------------------------------------------------------
  " Toggle fold state between closed and opened.
  " If there is no fold at current line, just moves forward.
  " If it is present, reverse it's state.
  function! ToggleFold()
    if foldlevel('.') == 0
      normal! l
    else
      if foldclosed('.') < 0
        . foldclose
      else
        . foldopen
      endif
    endif
    " Clear status line
    echo
  endfun

  noremap <space> :call ToggleFold()<CR>
" }}}

" Useful customization {{{1
" ---------------------------------------------------------
  " Fast escape insert mode
  "inoremap <Esc> <nop>
  inoremap jj <ESC>

  " Strip all trading whitespace in current while
  nmap <leader>W :%s/\s\+$//<CR>:let @/=''<CR>

  " HTML fold tag
  nmap <leader>f Vatzf

  " Sort css properties alphabetically
  nmap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>

  " Shortcut to rapidly toggle `set list`
  nmap <leader>i :set list!<CR>

  " Formatting, TextMate-style
  map <leader>Q gqip

  " Make shortcut
  nmap <leader>m :make<CR>

  " Save on losing focus
  au focuslost * :wa

  " Disable help key
  map <F1> <nop>

  " Move current line down/up
  map <C-Up> dd<Up>P
  map <C-Down> ddp

  " Move visually selected lines down/up
  vmap <C-Down> xp`[V`]
  vmap <C-Up> x<Up>P`[V`]

  " Move visual selection back/forwards
  vmap <C-Left> x<BS>P`[v`]
  vmap <C-Right> x<Space>P`[v`]

  " Shortcut to buffers
  nmap <leader>b :buffers<CR>:buffer<Space>

  " Xcode header to implementation shortcut
  vmap <D-A-Up> :e %:p:s,.h$,.X123X,:s,.m$,.h,:s,.X123X$,.m,<CR>

  " Forgot sudo
  cmap w!! w !sudo tee % >/dev/null

  " Shortcut for edit/source vim runtime configuration in command
  command! Ev edit $MYVIMRC
  command! Rv source $MYVIMRC
" }}}

" Plugin Settings {{{1
" ---------------------------------------------------------
  " NerdTree
  map <leader>n :NERDTreeToggle<CR>
  map <F1> :NERDTreeToggle<CR>
  map <F2> :NERDTreeFind<CR>
  let NERDTreeWinSize = 30
  let NERDTreeQuitOnOpen = 1

  " TagList
  let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
  let Tlist_Use_Right_Window = 1
  map <leader>5 :TlistToggle<CR>
  map <F3> :TlistToggle<CR>

  " Ack
  map <leader>a :Ack<space>

  " Fugitive
  "nmap <Space>gd :Gdiff<CR>
  "nmap <Space>gc :Gcommit<CR>
  "nmap <Space>gw :Gwrite<CR>
  "nmap <Space>gs :Gstatus<CR>
  command! Gd :Gdiff
  command! Gc :Gcommit
  command! Gw :Gwrite
  command! Gs :Gstatus

  " Neocomplcache
  let g:neocomplcache_enable_at_startup = 1

  " Zen coding
  let g:user_zen_leader_key = '<c-e>'
  let g:use_zen_complete_tag = 1
" }}}
